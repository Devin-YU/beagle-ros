Reports of the Beagle-ROS project:
====================================
====================================

Week 1:
=======
What has been accomplished?:
    - Angstrom distribution running in the BB
    - ROS running installed in Angstrom through the script https://github.com/vmayoral/beagle-ros/blob/master/ros-angstrom.sh
    - roscore running
    - ros installation working against an external master (rosnode list and rosnode ping)

 Issues:
    - It seems ROS nodes doesn't start properly. This is an issue previosly opened in the meta-ros project https://github.com/bmwcarit/meta-ros/issues/68. I'm actively working to find a solution with the meta-ros guys https://github.com/bmwcarit/meta-ros/issues/10  but it might take a while since this issue has been open for some time already.
    - catkin_make doesn't work. Neither it does going through the process manually http://www.ros.org/wiki/catkin/commands/catkin_make.

 Plans for the next week:
    - Adress the first issue. Try to make the ROS nodes start properly. Some debugging will be necessary.
    - Address catkin_make issue.
    - complete the rosping milestone
    - keep working in the roadmap planned (ROS tutorials for now).

    

Week 2:
=======
What has been accomplished?:
    - Several tests with ROS nodes and ping. It seems the nodes launched from external cores work fine while the nodes launched from the BeagleBone (Angstrom, meta-ros) don't seem to work. See issue #10 at the meta-ros code (https://github.com/bmwcarit/meta-ros/issues/10)
    - python-catkin updated. Due to this update there's some progress in the catkin_make process
    - started debugging the ros nodes

 Issues:
    - ROS nodes still doesn't work as expected. See the debug logs at #10.
    - catkin_make doesn't fully work in Angstrom. See #99 (https://github.com/bmwcarit/meta-ros/issues/99).

 Plans for the next week:
    - Address catkin_make issue.
    - Keep debugging the nodes.
    - keep working in the roadmap planned (ROS tutorials for now).

    

Week 3:
=======
What has been accomplished?:
    - ROS nodes now work properly if launched from the bone. ROS ping works from every every node now.
    - catkin_make issue solved.
    - Progress with tutorials.

 Issues:
    - rospack depends1 not working (meta-ros issue #108). For now this task will be left for a latter time.
    - building ROS packages in the bone using catkin_make (meta-ros issue #109). Like the previous one, it requires too much work for now. 

 Plans for the next week:
    - Since building the ROS packages natively with catkin_make might lead to a route that could take several weeks to complete, this task will be done
        using the cross-compiler. A tutorial will be created for this purpose.
    - Continue with ROS tutorials.



Week 4:
=======
What has been accomplished?:
    - More progress with tutorials.
    - Cross-compilation ROS package example created (beginner_tutorials).
    - Cross-compilation of ros_tutorials 

 Issues:
    - When trying to remove a package through opkg "opkg remove roscpp-tutorials*.ipkg". It says "No packages removed".
    - ros_tutorials: turtlesim doesn't compile, there's an error that should be addressed.
    - common_tutorials: same issue, there's an error when cross-compiling.
    
 Plans for the next week:
    - Address the issues with ros_tutorials and common_tutorials.
    - Get started with the sensors interfacing. Since i still haven't received the Audio cape the IMU will be addressed first. It's necessary to set the
    right connections (in this case through the I2C port) and check that the driver is working as expected.
    - It has been released a new driver for the IMU to be used (MPU-9150). It might be interesting to integrate this new driver too (https://github.com/Pansenti/linux-mpu9150).


Week 5:
=======
What has been accomplished?:
    - opkg remove was just a matter of using the package name (instead of the file name).
    - ros-tutorials and ros-common recipes modified to  include all the necessary compile and runtime dependencies (still some don't compile)
    - diving-meta-ros repo created to introduce the necessary steps about how to create a bitbake recipe from a ROS package.xml (suggested by the BMW guys)
    - mpu-9150 driver recipe created. The recipe cross-compiles the driver but there's a need to specify what/where to install.
    - linux-mpu9150 compiled compiled both natively and using the cross-compiler.
    - linux-mpu9150 driver seems to work fine.

 Issues:
    - turtlesim and the common-tutorials packages don't cross-compile. It seems these tutorials should be addressed with more calm since the solution isn't obvious.
    - mpu-9150_git.bb recipe compiles the driver however it doesn't ship it (https://github.com/vmayoral/beagle-ros/blob/master/recipes/mpu-9150/mpu-9150_git.bb)
    - the kernel module driver for the MPU-6050 doesn't work.  I tried the fix "echo inv_mpu6050 0x68 > /sys/class/i2c-adapter/i2c-1/new_device" however it doesn't seem to created the files expected under /sys/bus/iio/devices/.

    
 Plans for the next week:
    - Finish the diving-meta-ros repo, a repository created to ilustrate how-to write a bitbake recipe from a ros package (meta-ros guys consider it's necessary).
    - Keep digging into the IMU hardware issues.
    - Start developing a node that publishes the information of the IMU.


